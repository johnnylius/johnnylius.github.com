<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny’s Blog</title>
  <subtitle>在学习中自娱自乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://macxer.com/"/>
  <updated>2017-05-22T10:37:33.000Z</updated>
  <id>https://macxer.com/</id>
  
  <author>
    <name>Johnny Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现支持HTTPS代码及分析</title>
    <link href="https://macxer.com/2017/05/08/support-https-code/"/>
    <id>https://macxer.com/2017/05/08/support-https-code/</id>
    <published>2017-05-08T04:29:45.000Z</published>
    <updated>2017-05-22T10:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解了如何使用AFNetworking实现HTTPS支持的不同方式，以及对AFNetworking实现源码分析。</p>
<a id="more"></a>
<p><a href="https://github.com/johnnylius/HttpsDemo" target="_blank" rel="external">Demo地址</a></p>
<h3 id="实现默认方式支持HTTPS"><a href="#实现默认方式支持HTTPS" class="headerlink" title="实现默认方式支持HTTPS"></a>实现默认方式支持HTTPS</h3><p>首先恭喜你，无论你使用NSURLConnection，NSURLSession还是AFNetworking，默认已经支持了HTTPS，不用写任何代码。当然这也需要一些小的前提，服务端证书是有效证书，并且包含所请求的域名。但如果是自签名方式，则需要自己写代码实现。</p>
<h3 id="实现自签名证书验证支持HTTPS"><a href="#实现自签名证书验证支持HTTPS" class="headerlink" title="实现自签名证书验证支持HTTPS"></a>实现自签名证书验证支持HTTPS</h3><p>这里用12306网站来做测试，因为它是用的自签名证书。说个题外话，12306为什么用自签名证书？有兴趣的同学可以看下<a href="https://www.jayxon.com/12306-certificate/" target="_blank" rel="external">这里</a>和<a href="http://www.williamlong.info/archives/3461.html" target="_blank" rel="external">这里</a>。由于12306网站不支持<a href="https://en.wikipedia.org/wiki/Forward_secrecy" target="_blank" rel="external">Forward secrecy</a>，所以需要在info.plist中设置<code>NSExceptionRequiresForwardSecrecy</code>为<code>NO</code>，具体设置参见<a href="https://github.com/johnnylius/HttpsDemo" target="_blank" rel="external">Demo</a>。</p>
<p>1、把下载的12306根证书导入项目，加载证书文件</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSData</span> *)loadCertificateData &#123;</div><div class="line">    <span class="built_in">NSString</span> *cerName = <span class="string">@"SRCA"</span>; <span class="comment">// 12306根证书</span></div><div class="line">    <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:cerName ofType:<span class="string">@"cer"</span>];</div><div class="line">    <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</div><div class="line">    <span class="keyword">return</span> certData;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、修改AFSecurityPolicy对象配置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (AFSecurityPolicy *)certificateSecurityPolicy &#123;</div><div class="line">    <span class="comment">// 设置验证模式</span></div><div class="line">    AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</div><div class="line">    <span class="comment">// 设置验证证书</span></div><div class="line">    securityPolicy.pinnedCertificates = @[[<span class="keyword">self</span> loadCertificateData]];</div><div class="line">    <span class="comment">// 设置允许无效证书</span></div><div class="line">    securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">return</span> securityPolicy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、使用AFNetworking对象请求数据，链接地址为<code>https://kyfw.12306.cn/otn/</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">manager.securityPolicy = [<span class="keyword">self</span> certificateSecurityPolicy];</div><div class="line"><span class="built_in">NSString</span> *httpsURL = <span class="string">@"https://kyfw.12306.cn/otn/"</span>;</div><div class="line">[manager GET: httpsURL parameters:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">    <span class="built_in">NSString</span> *string = [[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [<span class="keyword">self</span> printLogWithTitle:<span class="string">@"AFNetworking Data:"</span> content:string];</div><div class="line">    [<span class="keyword">self</span> printLogWithTitle:<span class="string">@"AFNetworking Finish"</span> content:<span class="string">@""</span>];</div><div class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">    [<span class="keyword">self</span> printLogWithTitle:<span class="string">@"TrustEvaluate Error"</span> content:error];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="AFNetworking源码分析"><a href="#AFNetworking源码分析" class="headerlink" title="AFNetworking源码分析"></a>AFNetworking源码分析</h3><p>在AFSecurityPolicy中有两个开关：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 是否允许无效证书，默认是NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> allowInvalidCertificates;</div><div class="line"></div><div class="line"><span class="comment">// 是否验证域名，默认是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> validatesDomainName;</div></pre></td></tr></table></figure>
<p>还有三种验证模式：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, AFSSLPinningMode) &#123;</div><div class="line">    AFSSLPinningModeNone, <span class="comment">// 默认验证模式</span></div><div class="line">    AFSSLPinningModePublicKey, <span class="comment">// 公钥验证模式，比对证书公钥</span></div><div class="line">    AFSSLPinningModeCertificate, <span class="comment">// 证书验证模式，比对证书内容</span></div><div class="line">    <span class="comment">// 注意后两种模式都需要导入证书文件</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以利用他们来实现不同的验证策略，比如，实现自签名证书验证方式，<code>allowInvalidCertificates</code>设为<code>YES</code>，模式选择<code>AFSSLPinningModeCertificate</code>，就可以了。</p>
<p>其中验证逻辑的核心方法是<code>evaluateServerTrust</code>，上半部分为默认验证逻辑如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> *policies = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.validatesDomainName) &#123;</div><div class="line">    <span class="comment">// 需要验证域名</span></div><div class="line">    [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateSSL(<span class="literal">true</span>, (__bridge <span class="built_in">CFStringRef</span>)domain)];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateBasicX509()];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置策略</span></div><div class="line">SecTrustSetPolicies(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)policies);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.SSLPinningMode == AFSSLPinningModeNone) &#123;</div><div class="line">    <span class="comment">// 不用证书验证时，要么允许无效证书，要么证书有效</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.allowInvalidCertificates || AFServerTrustIsValid(serverTrust);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust) &amp;&amp; !<span class="keyword">self</span>.allowInvalidCertificates) &#123;</div><div class="line">    <span class="comment">// 其它模式验证时，证书无效同时不允许无效时，不再继续验证</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下半部分为不同模式下的验证逻辑，证书验证需要设置锚点证书（Anchor Certificate）</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">self</span>.SSLPinningMode) &#123;</div><div class="line">    <span class="keyword">case</span> AFSSLPinningModeNone:</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">case</span> AFSSLPinningModeCertificate: &#123;</div><div class="line">        <span class="built_in">NSMutableArray</span> *pinnedCertificates = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSData</span> *certificateData <span class="keyword">in</span> <span class="keyword">self</span>.pinnedCertificates) &#123;</div><div class="line">            [pinnedCertificates addObject:(__bridge_transfer <span class="keyword">id</span>)SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificateData)];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置锚点证书</span></div><div class="line">        SecTrustSetAnchorCertificates(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)pinnedCertificates);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 取得证书链数组</span></div><div class="line">        <span class="built_in">NSArray</span> *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);</div><div class="line">        <span class="comment">// 逐一比对是否包含证书</span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSData</span> *trustChainCertificate <span class="keyword">in</span> [serverCertificates reverseObjectEnumerator]) &#123;</div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span>.pinnedCertificates containsObject:trustChainCertificate]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> AFSSLPinningModePublicKey: &#123;</div><div class="line">        <span class="built_in">NSUInteger</span> trustedPublicKeyCount = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 取得公钥数组</span></div><div class="line">        <span class="built_in">NSArray</span> *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);</div><div class="line">        <span class="comment">// 逐一对比证书公钥</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> trustChainPublicKey <span class="keyword">in</span> publicKeys) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> pinnedPublicKey <span class="keyword">in</span> <span class="keyword">self</span>.pinnedPublicKeys) &#123;</div><div class="line">                <span class="keyword">if</span> (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) &#123;</div><div class="line">                    trustedPublicKeyCount += <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> trustedPublicKeyCount &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AFServerTrustIsValid</code>中实际就是调用<code>SecTrustEvaluate</code>进行验证评估</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> AFServerTrustIsValid(SecTrustRef serverTrust) &#123;</div><div class="line">    <span class="built_in">BOOL</span> isValid = <span class="literal">NO</span>;</div><div class="line">    SecTrustResultType result;</div><div class="line">    __Require_noErr_Quiet(SecTrustEvaluate(serverTrust, &amp;result), _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    isValid = (result == kSecTrustResultUnspecified || result == kSecTrustResultProceed);</div><div class="line"></div><div class="line">_<span class="keyword">out</span>:</div><div class="line">    <span class="keyword">return</span> isValid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在URLSession的代理中处理验证逻辑，具体实现细节</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</div><div class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> *credential))completionHandler</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">    __block <span class="built_in">NSURLCredential</span> *credential = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.sessionDidReceiveAuthenticationChallenge) &#123;</div><div class="line">        disposition = <span class="keyword">self</span>.sessionDidReceiveAuthenticationChallenge(session, challenge, &amp;credential);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ([challenge.protectionSpace.authenticationMethod isEqualToString:<span class="built_in">NSURLAuthenticationMethodServerTrust</span>]) &#123;</div><div class="line">            <span class="comment">// 调用evaluateServerTrust进行验证逻辑</span></div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span>.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) &#123;</div><div class="line">                <span class="comment">// 生成NSURLCredential凭证credential</span></div><div class="line">                credential = [<span class="built_in">NSURLCredential</span> credentialForTrust:challenge.protectionSpace.serverTrust];</div><div class="line">                <span class="keyword">if</span> (credential) &#123;</div><div class="line">                    disposition = <span class="built_in">NSURLSessionAuthChallengeUseCredential</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                disposition = <span class="built_in">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (completionHandler) &#123;</div><div class="line">        <span class="comment">// 使用disposition和credential完成验证挑战</span></div><div class="line">        completionHandler(disposition, credential);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结整体流程"><a href="#总结整体流程" class="headerlink" title="总结整体流程"></a>总结整体流程</h3><ol>
<li>在Delegate中处理验证挑战</li>
<li>设置验证策略，锚点证书等</li>
<li>进行信任评估SecTrustEvaluate</li>
<li>生成凭证credential和disposition</li>
<li>完成或取消验证挑战</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/WorkingWithHTTPAndHTTPSRequests/WorkingWithHTTPAndHTTPSRequests.html" target="_blank" rel="external">Making HTTP and HTTPS Requests</a></li>
<li><a href="https://developer.apple.com/library/content/technotes/tn2232/_index.html" target="_blank" rel="external">HTTPS Server Trust Evaluation</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33" target="_blank" rel="external">NSAppTransportSecurity</a></li>
<li><a href="http://oncenote.com/2014/10/21/Security-1-HTTPS/" target="_blank" rel="external">iOS安全系列之一：HTTPS</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解了如何使用AFNetworking实现HTTPS支持的不同方式，以及对AFNetworking实现源码分析。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="HTTPS" scheme="https://macxer.com/tags/HTTPS/"/>
    
      <category term="AFNetworking" scheme="https://macxer.com/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTPS知识的文章整理</title>
    <link href="https://macxer.com/2017/04/28/https-articles/"/>
    <id>https://macxer.com/2017/04/28/https-articles/</id>
    <published>2017-04-28T09:24:00.000Z</published>
    <updated>2017-05-22T10:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为HTTPS相关知识的文章整理，其中内容包括HTTPS基本概念，SSL/TLS原理，中间人攻击，实现支持HTTPS等。</p>
<a id="more"></a>
<h3 id="系列一"><a href="#系列一" class="headerlink" title="系列一"></a>系列一</h3><ol>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">SSL/TLS协议运行机制的概述</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="external">图解SSL/TLS协议</a></li>
</ol>
<h3 id="系列二"><a href="#系列二" class="headerlink" title="系列二"></a>系列二</h3><ol>
<li><a href="http://oncenote.com/2014/10/21/Security-1-HTTPS/" target="_blank" rel="external">iOS安全系列之一：HTTPS</a></li>
<li><a href="http://oncenote.com/2015/09/16/Security-2-HTTPS2/" target="_blank" rel="external">iOS安全系列之二：HTTPS进阶</a></li>
</ol>
<h3 id="系列三"><a href="#系列三" class="headerlink" title="系列三"></a>系列三</h3><ol>
<li><a href="http://seanlook.com/2015/01/15/openssl-certificate-encryption/" target="_blank" rel="external">OpenSSL 与 SSL 数字证书概念贴</a></li>
<li><a href="http://seanlook.com/2015/01/07/tls-ssl/" target="_blank" rel="external">SSL/TLS原理详解</a></li>
<li><a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca/" target="_blank" rel="external">基于OpenSSL自建CA和颁发SSL证书</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为HTTPS相关知识的文章整理，其中内容包括HTTPS基本概念，SSL/TLS原理，中间人攻击，实现支持HTTPS等。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="HTTPS" scheme="https://macxer.com/tags/HTTPS/"/>
    
      <category term="SSL/TLS" scheme="https://macxer.com/tags/SSL-TLS/"/>
    
      <category term="数字证书" scheme="https://macxer.com/tags/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>SSL/TLS握手阶段概述</title>
    <link href="https://macxer.com/2017/04/28/ssl-handshake/"/>
    <id>https://macxer.com/2017/04/28/ssl-handshake/</id>
    <published>2017-04-28T07:50:00.000Z</published>
    <updated>2017-05-22T10:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文简要介绍了SSL/TLS握手阶段的核心过程，省去了部分其它细节。HTTPS传输数据是通过密钥加密的，而密钥就是在握手阶段生成的，所以说握手的过程就是会话密钥（Session key）生成的过程。</p>
<a id="more"></a>
<p>握手的大致过程描述如下：</p>
<p>1、客户端发起请求（Client Hello）建立SSL链接，并向服务端发送第一个随机数（Client random）和客户端支持的加密方法，比如RSA公钥加密，此时是明文传输。<br>2、服务端回复请求（Server Hello），确定一种支持的加密方法，第二个随机数（Server random），授信的服务器证书，其中包含服务端公钥。<br>3、客户端收到服务端的回复，利用服务端的公钥对第三个随机数（Premaster secret）加密，发送给服务器。<br>4、服务端收到客户端的回复，利用服务端私钥进行解密得到第三个随机数，同时利用Client random、Server random和Premaster secret生成会话密钥（Session key)。</p>
<p>此后的HTTP链接数据即通过对称加密方式进行传输。</p>
<p><img src="/2017/04/28/ssl-handshake/ssl-handshake.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简要介绍了SSL/TLS握手阶段的核心过程，省去了部分其它细节。HTTPS传输数据是通过密钥加密的，而密钥就是在握手阶段生成的，所以说握手的过程就是会话密钥（Session key）生成的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="HTTPS" scheme="https://macxer.com/tags/HTTPS/"/>
    
      <category term="SSL/TLS" scheme="https://macxer.com/tags/SSL-TLS/"/>
    
  </entry>
  
  <entry>
    <title>数据加密的基础知识</title>
    <link href="https://macxer.com/2017/04/18/basic-knowledge-of-data-encryption/"/>
    <id>https://macxer.com/2017/04/18/basic-knowledge-of-data-encryption/</id>
    <published>2017-04-18T12:03:00.000Z</published>
    <updated>2017-05-22T10:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解了关于加密相关的基础知识，其中包括对称密钥加密、公钥加密、单向散列算法及其配合使用，对理解HTTPS，SSL/TLS，数字签名等有很大的帮助。</p>
<a id="more"></a>
<h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><p>对称密钥加密（一个密钥），也叫做共享密钥加密或机密密钥加密，使用发件人和收件人共同拥有的单个密钥。这种密钥既用于加密，也用于解密，叫做机密密钥。对称密钥加密是加密大量数据的一种行之有效的方法。</p>
<p>对称密钥加密有许多种算法如AES,DES,RC4,IDEA等，但所有这些算法都有一个共同的目的：以可还原的方式将明文（未加密的数据）转换为暗文。暗文使用加密密钥编码，对于没有解密密钥的任何人来说它都是没有意义的。由于对称密钥加密在加密和解密时使用相同的密钥，所以这种加密过程的安全性取决于是否有未经授权的人获得了对称密钥。</p>
<p>衡量对称算法优劣的主要尺度是其密钥的长度。密钥越长，在找到解密数据所需的正确密钥之前必须测试的密钥数量就越多。需要测试的密钥越多，破解这种算法就越困难。</p>
<h3 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h3><p>公钥加密使用两个密钥:一个公钥和一个私钥，这两个密钥在数学上是相关的。为了与对称密钥加密相对照，公钥加密有时也叫做不对称密钥加密。在公钥加密中，公钥可在通信双方之间公开传递，或在公用储备库中发布，但相关的私钥是保密的。只有使用私钥才能解密用公钥加密的数据。使用私钥加密的数据只能用公钥解密。下图中，发件人拥有收件人的公钥，并用它加密了一封邮件，但只有收件人掌握解密该邮件的有关私钥。<br><img src="/2017/04/18/basic-knowledge-of-data-encryption/openssl-encryption.gif" alt="公钥加密"><br>公钥算法的主要局限在于，这种加密形式的速度相对较低。实际上，通常仅在关键时刻才使用公钥算法，如在实体之间交换对称密钥时，或者在签署一封邮件的散列时（散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法）。将公钥加密与其它加密形式（如对称密钥加密）结合使用，可以优化性能，如数字签名和密钥交换。</p>
<p>常用公钥算法：</p>
<ul>
<li>RSA：适用于数字签名和密钥交换。 是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据，RSA算法以它的三位发明者的名字命名。</li>
<li>DSA：仅适用于数字签名。 数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，已作为数字签名的标准。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密。</li>
<li>Diffie-Hellman：仅适用于密钥交换。 Diffie-Hellman 是发明的第一个公钥算法，以其发明者 Whitfield Diffie 和 Martin Hellman 的名字命名。Diffie-Hellman 算法的安全性取决于在一个有限字段中计算离散算法的困难。</li>
</ul>
<h3 id="单向散列算法"><a href="#单向散列算法" class="headerlink" title="单向散列算法"></a>单向散列算法</h3><p>散列，也称为散列值或消息摘要 ，是一种与基于密钥（对称密钥或公钥）的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。</p>
<p>下面是几个常用的散列函数：</p>
<ul>
<li>MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个128位的数值。</li>
<li>SHA-1：与 DSA 公钥算法相似，安全散列算法1（SHA-1）也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。</li>
<li>MAC（Message Authentication Code）：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC（用于消息认证的密钥散列算法）。</li>
<li>CRC（Cyclic Redundancy Check）：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段（CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类）。</li>
</ul>
<h3 id="数字签名：结合使用公钥与散列算法"><a href="#数字签名：结合使用公钥与散列算法" class="headerlink" title="数字签名：结合使用公钥与散列算法"></a>数字签名：结合使用公钥与散列算法</h3><p>数字签名是邮件、文件或其它数字编码信息的发件人将他们的身份与信息绑定在一起（即为信息提供签名）的方法。对信息进行数字签名的过程，需要将信息与由发件人掌握的秘密信息一起转换（使用私钥）为叫做签名的标记。数字签名用于公钥环境（任何人都可以拥有）中，它通过验证发件人确实是他或她所声明的那个人，并确认收到的邮件与发送的邮件完全相同。</p>
<p>散列算法处理数据的速度比公钥算法快得多。散列数据还缩短了要签名的数据的长度，因而加快了签名过程。</p>
<h3 id="密钥交换：结合使用对称密钥与公钥"><a href="#密钥交换：结合使用对称密钥与公钥" class="headerlink" title="密钥交换：结合使用对称密钥与公钥"></a>密钥交换：结合使用对称密钥与公钥</h3><p>对称密钥算法非常适合于快速并安全地加密数据。但其缺点是，发件人和收件人必须在交换数据之前先交换机密密钥。结合使用加密数据的对称密钥算法与交换机密密钥的公钥算法可产生一种既快速又灵活的解决方案。</p>
<p><a href="http://seanlook.com/2015/01/15/openssl-certificate-encryption/" target="_blank" rel="external">本文摘自</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲解了关于加密相关的基础知识，其中包括对称密钥加密、公钥加密、单向散列算法及其配合使用，对理解HTTPS，SSL/TLS，数字签名等有很大的帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="Encryption" scheme="https://macxer.com/tags/Encryption/"/>
    
      <category term="HTTPS" scheme="https://macxer.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>国行iOS10网络权限问题的另类处理</title>
    <link href="https://macxer.com/2016/11/14/ios10-allow-use-data/"/>
    <id>https://macxer.com/2016/11/14/ios10-allow-use-data/</id>
    <published>2016-11-14T03:30:00.000Z</published>
    <updated>2017-05-22T10:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多人已经知道，在国行iOS10上增加了网络权限的限制，首次启动应用就会弹出请求：「允许 XXX 使用数据？」，如下图，具体情况，请看<a href="http://sspai.com/35720" target="_blank" rel="external">这里</a></p>
<a id="more"></a>
<p><img src="/2016/11/14/ios10-allow-use-data/use-data.png" alt="请求网络权限"></p>
<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>应用首次启动时由于网络权限限制，在没有允许前是不能访问网络的，这时应用就会出现网络请求失败页面，用户还需要手动刷新页面来请求数据。由于苹果没有提供方法来获得权限，所以目前大部分应用只有一些临时解决方案，但效果都不十分理想。比如：提示用户问题原因，或者增加引导页来提前触发请求权限。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>经过测试发现请求权限提示框选择后会触发UIApplicationDidBecomeActiveNotification通知，所以我们就可以利用此来进行一些特殊处理来实现比较好的用户体验。<br>首先在特定情况下添加通知：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="comment">/*iOS10 &amp;&amp; 应用首次启动*/</span>) &#123;</div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(activeNotification:) name:<span class="built_in">UIApplicationDidBecomeActiveNotification</span> object:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次在触发通知进行处理：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)activeNotification:(<span class="built_in">NSNotification</span> *)notification</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 在没有加载数据时加载数据，否则移除通知</span></div><div class="line">    <span class="comment">// 还可以进行次数判断，在触发一定次数通知后移除通知</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.alreadyLoadData) &#123;</div><div class="line">        [<span class="keyword">self</span> loadData];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidBecomeActiveNotification</span> object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="内容更新：2017-03-29"><a href="#内容更新：2017-03-29" class="headerlink" title="内容更新：2017-03-29"></a>内容更新：2017-03-29</h3><p>其实上面的方法有点绕远了，其实解决方案很简单，可以监听网络状态，网络连接时重新请求数据就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多人已经知道，在国行iOS10上增加了网络权限的限制，首次启动应用就会弹出请求：「允许 XXX 使用数据？」，如下图，具体情况，请看&lt;a href=&quot;http://sspai.com/35720&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="iOS10" scheme="https://macxer.com/tags/iOS10/"/>
    
  </entry>
  
  <entry>
    <title>TableView的Header高度问题</title>
    <link href="https://macxer.com/2016/10/31/tableView-header-height/"/>
    <id>https://macxer.com/2016/10/31/tableView-header-height/</id>
    <published>2016-10-31T10:11:36.000Z</published>
    <updated>2017-05-22T10:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>当使用UITableView的Grouped样式时，有时不想显示SectionHeader或SectionFooter，但当设置了高度为0，却发现不起作用，感到一头雾水，其实需要设置一个很小的高度变可以不再显示，像这样：</p>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGFLOAT_MIN</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">CGFLOAT_MIN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不知道苹果为什么要这样设计，如果知道为什么，或我哪里理解错了，请留言，谢谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用UITableView的Grouped样式时，有时不想显示SectionHeader或SectionFooter，但当设置了高度为0，却发现不起作用，感到一头雾水，其实需要设置一个很小的高度变可以不再显示，像这样：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://macxer.com/categories/iOS/"/>
    
    
      <category term="UITableView" scheme="https://macxer.com/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://macxer.com/2016/08/01/hello-world/"/>
    <id>https://macxer.com/2016/08/01/hello-world/</id>
    <published>2016-08-01T06:27:40.000Z</published>
    <updated>2016-10-28T09:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="hexo" scheme="https://macxer.com/tags/hexo/"/>
    
  </entry>
  
</feed>
